<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="10 seconds">
    <!--    日志上下文名称-->
    <contextName>my_logback</contextName>
    <!--    name 是变量名称，value 是变量定义的值，通过定义的值会被插入到 Logger 中，定义变量后 可用${}来使用变量-->
    <property name="log.path" value="${catalina.base}/consumer-eureka-feign/logs"/>
    <!--    彩色日志-->
    <!--    彩色日志依赖的渲染类-->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!--    彩色日志格式-->
<!--    <property name="CONSOLE_LOG_PATTERN"-->
<!--              value="${CONSOLE_LOG_PATTERN}：-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}"/>-->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN}：-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${CONSOLE_LOG_PATTERN:-%wEx}}" />
    <!--    文件日志格式-->
    <property name="FAIL_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>

    <!--    输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--        此日志 appender 是为开发使用, 只配置最低级别, 控制台输出的日志级别是大于或等于次级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--    输出到文件-->
    <!--    时间滚动输出 level 为 debug 的日志-->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--       记录日志文件路径及文件名-->
        <file>${log.path}/log_debug.log</file>
        <!--        日志文件输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--        日志归档-->
        <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <timeBaseFileNamingAndTriggerPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>100MB</maxFileSize>
        </timeBaseFileNamingAndTriggerPolicy>
        <!--        日志保留天数-->
        <maxHistory>15</maxHistory>
    </rollingPolicy>
    <!--    此日志只记录 debug 级别-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>DEBUG</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <!--   时间滚动输出 level 为 info 日志 到文件-->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--       记录日志文件路径及文件名-->
        <file>${log.path}/log_info.log</file>
        <!--        日志文件输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--    日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--        日志归档-->
        <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <timeBaseFileNamingAndTriggerPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>100MB</maxFileSize>
        </timeBaseFileNamingAndTriggerPolicy>
        <!--        日志保留天数-->
        <maxHistory>15</maxHistory>
    </rollingPolicy>
    <!--    此日志只记录 info 级别-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>INFO</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <!--   时间滚动输出 level 为 warn 日志 到文件-->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--       记录日志文件路径及文件名-->
        <file>${log.path}/log_warn.log</file>
        <!--        日志文件输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--    日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--        日志归档-->
        <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <timeBaseFileNamingAndTriggerPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>100MB</maxFileSize>
        </timeBaseFileNamingAndTriggerPolicy>
        <!--        日志保留天数-->
        <maxHistory>15</maxHistory>
    </rollingPolicy>
    <!--    此日志只记录 info 级别-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>WARN</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <!--   时间滚动输出 level 为 error 日志 到文件-->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--       记录日志文件路径及文件名-->
        <file>${log.path}/log_error.log</file>
        <!--        日志文件输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--    日志记录器的滚动策略，按日期，按大小记录-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--        日志归档-->
        <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <timeBaseFileNamingAndTriggerPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>100MB</maxFileSize>
        </timeBaseFileNamingAndTriggerPolicy>
        <!--        日志保留天数-->
        <maxHistory>15</maxHistory>
    </rollingPolicy>
    <!--    此日志只记录 info 级别-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>ERROR</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <!--    对类似于 com.example.Logback 开头的 Logger, 输出级别设置为 warn, 并且只输出到控制台-->
    <!--    这个 Logger 没有指定 appender, 它会继承 root 节点中定义的 appender-->
    <!--    <Logger name="com.example.Logback" level="warn"></Logger>-->

    <!--    通过 LoggerFactory.getLogger("myLog") 可以获取到这个 Logger-->
    <!--    由于这个 Logger 自动继承了 root 的 appender, root 中已经有了 stdout 的 appender了 自己这边引入了 stdout 的 appender-->
    <!--    如果没有设置 additivity=“false”, 会导致一条日志在控制台输出两次的情况-->
    <!--    additivity 表示不要使用 rootLogger 配置的 appender 进行输出-->
    <logger name="myLog" level="INFO" adddivity="false">
        <appender-ref ref="CONSOLE"/>
    </logger>
    <!--日志输出级别及方式-->
    <root level="DEBUG">
        <appender-re ref="CONSOLE"/>
        <appender-re ref="DEBUG_FILE"/>
        <appender-re ref="INFO_FILE"/>
        <appender-re ref="WARN_FILE"/>
        <appender-re ref="ERROR_FILE"/>
    </root>
</configuration>